ng-app 指令定义一个 AngularJS 应用程序。
ng-model 指令把元素值（比如输入域的值）绑定到应用程序。
ng-bind 指令把应用程序数据绑定到 HTML 视图。
ng-init 指令初始化 AngularJS 应用程序变量。
ng-app指令定义了应用, ng-controller 定义了控制器。
ng-repeat 指令会重复一个 HTML 元素
ng-show 属性返回 true 的情况下显示
ng-option 指令来创建一个下拉列表，列表项通过对象和数组循环输出
ng-disabled 指令直接绑定应用程序数据到 HTML 的 disabled 属性。
ng-show 指令隐藏或显示一个 HTML 元素。
ng-hide 指令用于隐藏或显示 HTML 元素。
ng-click 指令定义了 AngularJS 点击事件。
ng-include 指令来包含 HTML 内容

AngularJS 表达式写在双大括号内：{{ expression }}。
AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。
实例 {{ 5 + 5 }} 或 {{ firstName + " " + lastName }}
与ng-bind类似


可以使用 .directive 函数来添加自定义的指令。
要调用自定义指令，HTML 元素上需要添加自定义指令名。
使用驼峰法来命名一个指令， runoobDirective, 但在使用它时需要以 - 分割, runoob-directive:
例：
<runoob-directive></runoob-directive>
<div runoob-directive></div>
<div class="runoob-directive"></div>
<!-- directive: runoob-directive -->
<script>
var app = angular.module("myApp", []);
app.directive("runoobDirective", function() {
    return {
		restrict : "A",
        template : "<h1>自定义指令!</h1>"
    };
});
</script>
restrict 值可以是以下几种:
	E 作为元素名使用
	A 作为属性使用
	C 作为类名使用
	M 作为注释使用
	restrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。
作为注释使用时必须设置replace 属性为true， 否则评论是不可见的。


ng-model在一个form指令中，ng-model指令会把自己的controller添加到form中去，和form建立关联
ng-model实现了一些默认的数据校验的功能，比如：url、email等格式校验。ng-model还实现了数据状态的控制，比如：数据是否有效，是否是新数据等
ng-model 指令可以为应用数据提供状态值(invalid, dirty, touched, error)
详情见AngularJSDemo/index.html中的AppDemo5


当在控制器中添加 $scope 对象时，视图 (HTML) 可以获取了这些属性,只作用于当前控制器。
$rootScope 可作用于整个应用中。是各个 controller 中 scope 的桥梁。用 rootscope 定义的值，可以在各个 controller 中使用。
在大型的应用程序中，通常是把控制器存储在外部js文件中。


AngularJS过滤器可用于转换数据：
	currency	格式化数字为货币格式。
	filter		从数组项中选择一个子集。
	lowercase	格式化字符串为小写。
	orderBy		根据某个表达式排列数组。
	uppercase	格式化字符串为大写。
过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中。
例:{{ lastName | uppercase }}
orderBy如果只按大小排序可以使用orderBy:sortSimpleType
date 格式化 {{1490161945000 | date:"yyyy-MM-dd HH:mm:ss"}} // 2017-03-22 13:52:25
number 格式化（保留小数）{{149016.1945000 | number:2}}	//149016.19
currency货币格式化
{{ 250 | currency }}            // 结果：$250.00
{{ 250 | currency:"RMB ￥ " }}  // 结果：RMB ￥ 250.00
app.filter可以自定义过滤器

在 AngularJS 中，服务是一个函数或对象，可在你的 AngularJS 应用中使用。
$location 服务，它可以返回当前页面的 URL 地址。
$location.absUrl();
$http 是 AngularJS 应用中最常用的服务。 服务向服务器发送请求，应用响应服务器传送过来的数据。
$timeout 服务对应了 JS window.setTimeout 函数。
$interval 服务对应了 JS window.setInterval 函数。
$watch：持续监听数据上的变化，更新界面。
可以app.service创建访问自定义服务，链接到你的模块中


$http 是 AngularJS 中的一个核心服务，用于读取远程服务器的数据。
// 简单的 GET 请求，可以改为 POST
$http({
	method: 'GET',
	url: '/someUrl'
}).then(function successCallback(response) {
		// 请求成功执行代码
	}, function errorCallback(response) {
		// 请求失败执行代码
});
POST 与 GET 简写方法格式：
$http.get('/someUrl', config).then(successCallback, errorCallback);
$http.post('/someUrl', data, config).then(successCallback, errorCallback);
此外还有以下简写方法：
$http.get
$http.head
$http.post
$http.put
$http.delete
$http.jsonp
$http.patch

ng-repeat 指令是通过数组来循环 HTML 代码来创建下拉列表，但 ng-options 指令更适合创建下拉列表，它有以下优势：
使用 ng-options 的选项的一个对象， ng-repeat 是一个字符串。

ng-repeat 指令可以完美的显示表格。
$index 显示序号
使用 $even 和 $odd 行数为奇数或偶数

checkbox 的值为 true 或 false，可以使用 ng-model 指令绑定，它的值可以用于应用中
单选框使用同一个 ng-model ，可以有不同的值，但只有被选中的单选按钮的值会被使用。
下拉菜单中ng-model 属性的值为你在下拉菜单选中的选项。

HTML 表单属性 novalidate 用于禁用浏览器默认的验证。
$dirty	表单有填写记录
$valid	字段内容合法的
$invalid	字段内容是非法的
$pristine	表单没有填写记录

API 函数：
angular.lowercase()	转换字符串为小写
angular.uppercase()	转换字符串为大写
angular.isString()	判断给定的对象是否为字符串，如果是返回 true。
angular.isNumber()	判断给定的对象是否为数字，如果是返回 true。

ng-include 指令除了可以包含 HTML 文件外，还可以包含 AngularJS 代码。
如果包含的HTML文件中有 AngularJS 代码，它将被正常执行。
默认情况下， ng-include 指令不允许包含其他域名的文件。
如果你需要包含其他域名的文件，你需要设置域名访问白名单：
详情:http://www.runoob.com/angularjs/angularjs-include.html

AngularJS 提供了动画效果，可以配合 CSS 使用。
AngularJS 使用动画需要引入 angular-animate.min.js 库。
还需在应用中使用模型 ngAnimate：
<body ng-app="ngAnimate">
如果我们应用已经设置了应用名，可以把 ngAnimate 直接添加在模型中:
var app = angular.module('myApp', ['ngAnimate']);
应用中动画不宜太多，但合适的使用动画可以增加页面的丰富性，也可以更易让用户理解。
AngularJS 添加/移除 class 的指令:
ng-show
ng-hide
ng-class
ng-view
ng-include
ng-repeat
ng-if
ng-switch

AngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：
value
factory
service
provider
constant
Value 是一个简单的 javascript 对象，用于向控制器传递值（配置阶段）：
mainApp.value("defaultInput", 5);
factory 是一个函数用于返回值。在 service 和 controller 需要时创建。
mainApp.factory('MathService', function() {
   var factory = {};
   
   factory.multiply = function(a, b) {
      return a * b
   }
   return factory;
}); 
AngularJS 中通过 provider 创建一个 service、factory等(配置阶段)。
Provider 中提供了一个 factory 方法 get()，它用于返回 value/service/factory。
mainApp.config(function($provide) {
   $provide.provider('MathService', function() {
      this.$get = function() {
         var factory = {};  
         
         factory.multiply = function(a, b) {
            return a * b; 
         }
         return factory;
      };
   });
});
constant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。
constant(name,value)和value(name,value)的区别
1.value不可以在config里注入，但是constant可以
2.value可以修改，但是constant不可以修改，一般直接用constant配置一些需要经常使用的数据。
3.通常情况下，可以通过value()来注册服务对象或函数，用constant()来配置数据。

AngularJS 路由
AngularJS 可以实现多视图的单页Web应用
通常我们的URL形式为 http://runoob.com/first/page，但在单页Web应用中 AngularJS 通过 # + 标记 实现，# 号之后的内容在向服务端请求时会被浏览器忽略掉
例如：
http://runoob.com/#/first
实例解析：
1、载入了实现路由的 js 文件：angular-route.js。
2、包含了 ngRoute 模块作为主应用模块的依赖模块。
angular.module('routingDemoApp',['ngRoute'])
3、使用 ngView 指令。
<div ng-view></div>
该 div 内的 HTML 内容会根据路由的变化而变化。
4、配置 $routeProvider，AngularJS $routeProvider 用来定义路由规则。
module.config(['$routeProvider', function($routeProvider){
    $routeProvider
        .when('/',{template:'这是首页页面'})
        .when('/computers',{template:'这是电脑分类页面'})
        .when('/printers',{template:'这是打印机页面'})
        .otherwise({redirectTo:'/'});
}]);

$routeProvider.when 函数的第一个参数是 URL 或者 URL 正则规则，第二个参数为路由配置对象。
路由配置对象语法规则如下：
$routeProvider.when(url, {
    template: string,	//插入简单的 HTML 内容
    templateUrl: string,	//插入 HTML 模板文件
    controller: string, function 或 array,	//function、string或数组类型，在当前模板上执行的controller函数，生成新的scope。
    controllerAs: string,	//string类型，为controller指定别名。
    redirectTo: string, function,	//重定向的地址。
    resolve: object<key, function>	//指定当前controller所依赖的其他模块。
});

--------------------------------------------------------------

注：
参考手册：http://www.runoob.com/angularjs/angularjs-reference.html

HTML5 允许扩展的（自制的）属性，以 data- 开头。
AngularJS 属性以 ng- 开头，但是您可以使用 data-ng- 来让网页对 HTML5 有效。

AngularJS默认在一个html界面中只启动一个ng-app 模块，
而且是界面中第一次出现的那个使用 ng-app 声明的模块
其他的ng-app 模块需要用 angular.bootstrap 手动加载
例:
angular.element(document).ready(
	function(){
		angular.bootstrap(document.getElementById("appDemo2"),["appDemo2"]);
	}
);


编写一个ngMultiView
http://blog.csdn.net/pdw2009/article/details/47834265
ngView运行的很好，但是如果你想要根据url来改变多个视图怎么办。根据文档我们知道在一个应用中ngView只能被使用一次。为了完成我们的ngMultiView，我们需要稍稍修改ngView，并创建一个AngularJS值（MultiViewPaths）来保存urls，views，controllers以及templates之间的映射。
在ngMultiView中，我们需要给指令传递一个参数：
<div ng-multi-view="secondaryContent"></div>
在这个指令中，这个属性被称为”panel”。我们在此不绑定”$routeChangeSuccess”事件，而是去绑定”$locationChangeSuccess”事件，来确保我们的指令完全的独立于ngRoute。ngMultiView将会根据下面的方式运行：
一个url的变化会触发’$locationChangeSuccess’事件，它反过来会掉哦那个update()函数；
在update函数内部：获取URL#符号后面的部分
使用这个URL变量，以及panel，我们从MultiViewPaths中查找相应的控制器和模板
如果我们找到了控制器和模板，ngMultiView几乎就和ngView一样了
var app = angular.module('app', []);
app.value('MultiViewPaths', 
  {'/' : {
     content : {
       template : '<h1>Home Page</h1><p>More Cats!</p>'
     },
     secondaryContent :  {
       template : '<h2>Visitors Online</h2><ul><li ng-repeat="user in users">{{user}}</li></ul>',
       controller : 'ListUsersCtrl'
     }
  },
  '/cats' : {
    content:  {
      template : '<h1>All Cats</h1><ul><li ng-repeat="cat in cats">{{cat}}</li></ul>',
      controller : 'ListCatsCtrl'
    },
    secondaryContent :  {
      template : '<h2>Cat of the Minute: {{cat}}</h2>',
      controller : 'CatOfTheMinuteCtrl'
    }
  }
});

app.directive("ngMultiView", ['$rootScope', '$compile', '$controller', '$location', 'MultiViewPaths', function($rootScope, $compile, $controller, $location, MultiViewPaths){
  return {
    terminal: true,
    priority: 400,
    transclude: 'element',
    compile : function(element, attr, linker){
      return function(scope, $element, attr) {
        var currentElement,
            panel = attr.ngMultiView;

        $rootScope.$on('$locationChangeSuccess', update); 
        update();

        // update view
        function update(evt, newUrl, oldUrl){
          if(!newUrl){ return }
          var url = newUrl.match(/#(\/.*)/),
              match, template, controller;

          match = url ? MultiViewPaths[url[1]] : MultiViewPaths['/'];
          template = match[panel].template;
          controller = match[panel].controller;

          if(template){
            var newScope = scope.$new(),
                locals = {},
                newController = controller;        

            linker(newScope, function(clone){
              clone.html(template);
              $element.parent().append(clone);

              if(currentElement){
                currentElement.remove();
              }

              var link = $compile(clone.contents());

              currentElement = clone;

              if (newController) {
                locals.$scope = newScope;
                var controller = $controller(newController, locals);
                clone.data('$ngControllerController', newController);
                clone.children().data('$ngControllerController', newController);
              }

              link(newScope);
              newScope.$emit('$viewContentLoaded');
            });

          }else{
              //cleanup last view            
          }
        }
      }        
    }
  }
}]);

/* creating the controllers and their data */   
app.controller('ListUsersCtrl', ['$scope', function($scope){ 
  $scope.users = ['Lord Nikon', 'Acid Burn', 'Crash Override'];    
}]);    

app.value('cats', ['Toonces','Stache','Americat','Cassiopeia','Puck','Dica','Vivian','Shosh','Gray','Bashful','Querida','Ignatowski','Aenias','Ramsay','Ishcabible','Guinness','Roux','Gefahr']);

app.controller('ListCatsCtrl', ['$scope', 'cats', function($scope, cats){ 
  $scope.cats = cats;    
}]);

app.controller('CatOfTheMinuteCtrl', ['$scope', 'cats', function($scope, cats){ 
  var randIndex = Math.floor(Math.random() * cats.length);
  $scope.cat = cats[randIndex];    
}]); 
